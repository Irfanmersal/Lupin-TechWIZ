# -*- coding: utf-8 -*-
"""Lupin Tech.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TC3e6ZdSVvMhidvZWlC4xawJt_0Jp0iR
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.decomposition import PCA

# Load the data
train_df = pd.read_csv('/content/train.csv')
test_df = pd.read_csv('/content/test.csv')

numeric_features = ['age', 'height_in_cm', 'weight_in_lbs', 'glucose_lvl', 'total_cholestrol', 'good_cholestrol_lvl', 'bad_cholestrol_lvl', 'hemoglobin_lvl', 'urea_lvl', 'creatinine_lvl', 'liver_enzyme_lvl1', 'liver_enzyme_lvl2']
categorical_features = ['gender', 'left_eyesight_lvl', 'right_eyesight_lvl', 'can_hear_left_ear', 'can_hear_right_ear', 'blood_pressure_lvl1', 'blood_pressure_lvl2', 'smoking_habit', 'drinking_habit', 'residential_area']

numeric_imputer = SimpleImputer(strategy='mean')
train_df[numeric_features] = numeric_imputer.fit_transform(train_df[numeric_features])
test_df[numeric_features] = numeric_imputer.transform(test_df[numeric_features])

categorical_imputer = SimpleImputer(strategy='most_frequent')
train_df[categorical_features] = categorical_imputer.fit_transform(train_df[categorical_features])
test_df[categorical_features] = categorical_imputer.transform(test_df[categorical_features])

import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
data = pd.read_csv('/content/train.csv')

# Create a grid of plots
fig, axes = plt.subplots(5, 2, figsize=(12, 18))

# Plot age distribution by gender
sns.histplot(data[data['gender'] == 'Male']['age'], ax=axes[0, 0], label='Male')
sns.histplot(data[data['gender'] == 'Female']['age'], ax=axes[0, 0], label='Female')
axes[0, 0].set_title('Age Distribution by Gender')
axes[0, 0].legend()

# Plot height distribution by gender
sns.histplot(data[data['gender'] == 'Male']['height_in_cm'], ax=axes[0, 1], label='Male')
sns.histplot(data[data['gender'] == 'Female']['height_in_cm'], ax=axes[0, 1], label='Female')
axes[0, 1].set_title('Height Distribution by Gender')
axes[0, 1].legend()

# Plot weight distribution by gender
sns.histplot(data[data['gender'] == 'Male']['weight_in_lbs'], ax=axes[1, 0], label='Male')
sns.histplot(data[data['gender'] == 'Female']['weight_in_lbs'], ax=axes[1, 0], label='Female')
axes[1, 0].set_title('Weight Distribution by Gender')
axes[1, 0].legend()

# Plot left eyesight level by gender
sns.countplot(data[data['gender'] == 'Male']['left_eyesight_lvl'], ax=axes[1, 1], label='Male')
sns.countplot(data[data['gender'] == 'Female']['left_eyesight_lvl'], ax=axes[1, 1], label='Female')
axes[1, 1].set_title('Left Eyesight Level by Gender')
axes[1, 1].legend()

# Plot right eyesight level by gender
sns.countplot(data[data['gender'] == 'Male']['right_eyesight_lvl'], ax=axes[2, 0], label='Male')
sns.countplot(data[data['gender'] == 'Female']['right_eyesight_lvl'], ax=axes[2, 0], label='Female')
axes[2, 0].set_title('Right Eyesight Level by Gender')
axes[2, 0].legend()

# Plot left ear hearing by gender
sns.countplot(data[data['gender'] == 'Male']['can_hear_left_ear'], ax=axes[2, 1], label='Male')
sns.countplot(data[data['gender'] == 'Female']['can_hear_left_ear'], ax=axes[2, 1], label='Female')
axes[2, 1].set_title('Left Ear Hearing by Gender')
axes[2, 1].legend()

# Plot right ear hearing by gender
sns.countplot(data[data['gender'] == 'Male']['can_hear_right_ear'], ax=axes[3, 0], label='Male')
sns.countplot(data[data['gender'] == 'Female']['can_hear_right_ear'], ax=axes[3, 0], label='Female')
axes[3, 0].set_title('Right Ear Hearing by Gender')
axes[3, 0].legend()

# Plot blood pressure level 1 by gender
sns.histplot(data[data['gender'] == 'Male']['blood_pressure_lvl1'], ax=axes[3, 1], label='Male')
sns.histplot(data[data['gender'] == 'Female']['blood_pressure_lvl1'], ax=axes[3, 1], label='Female')
axes[3, 1].set_title('Blood Pressure Level 1 by Gender')
axes[3, 1].legend()

# Plot blood pressure level 2 by gender
sns.histplot(data[data['gender'] == 'Male']['blood_pressure_lvl2'], ax=axes[4, 0], label='Male')
sns.histplot(data[data['gender'] == 'Female']['blood_pressure_lvl2'], ax=axes[4, 0], label='Female')
axes[4, 0].set_title('Blood Pressure Level 2 by Gender')
axes[4, 0].legend()

# Adjust spacing between subplots
plt.subplots_adjust(hspace=0.5)

plt.show()

# Load the data
data = pd.read_csv('/content/train.csv')

# Create a grid of plots
fig, axes = plt.subplots(5, 3, figsize=(15, 18))

# Plot glucose level by gender and residential area
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Town')]['glucose_lvl'], ax=axes[0, 0], label='Male - Town')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Town')]['glucose_lvl'], ax=axes[0, 0], label='Female - Town')
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Urban')]['glucose_lvl'], ax=axes[0, 1], label='Male - Urban')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Urban')]['glucose_lvl'], ax=axes[0, 1], label='Female - Urban')
axes[0, 0].set_title('Glucose Level by Gender and Residential Area')
axes[0, 0].legend()
axes[0, 1].legend()

# Plot total cholesterol by gender and residential area
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Town')]['total_cholestrol'], ax=axes[0, 2], label='Male - Town')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Town')]['total_cholestrol'], ax=axes[0, 2], label='Female - Town')
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Urban')]['total_cholestrol'], ax=axes[1, 0], label='Male - Urban')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Urban')]['total_cholestrol'], ax=axes[1, 0], label='Female - Urban')
axes[0, 2].set_title('Total Cholesterol by Gender and Residential Area')
axes[0, 2].legend()
axes[1, 0].legend()

# Plot good cholesterol level by gender and residential area
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Town')]['good_cholestrol_lvl'], ax=axes[1, 1], label='Male - Town')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Town')]['good_cholestrol_lvl'], ax=axes[1, 1], label='Female - Town')
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Urban')]['good_cholestrol_lvl'], ax=axes[1, 2], label='Male - Urban')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Urban')]['good_cholestrol_lvl'], ax=axes[1, 2], label='Female - Urban')
axes[1, 1].set_title('Good Cholesterol Level by Gender and Residential Area')
axes[1, 1].legend()
axes[1, 2].legend()

# Plot bad cholesterol level by gender and residential area
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Town')]['bad_cholestrol_lvl'], ax=axes[2, 0], label='Male - Town')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Town')]['bad_cholestrol_lvl'], ax=axes[2, 0], label='Female - Town')
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Urban')]['bad_cholestrol_lvl'], ax=axes[2, 1], label='Male - Urban')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Urban')]['bad_cholestrol_lvl'], ax=axes[2, 1], label='Female - Urban')
axes[2, 0].set_title('Bad Cholesterol Level by Gender and Residential Area')
axes[2, 0].legend()
axes[2, 1].legend()

# Plot hemoglobin level by gender and residential area
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Town')]['hemoglobin_lvl'], ax=axes[2, 2], label='Male - Town')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Town')]['hemoglobin_lvl'], ax=axes[2, 2], label='Female - Town')
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Urban')]['hemoglobin_lvl'], ax=axes[3, 0], label='Male - Urban')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Urban')]['hemoglobin_lvl'], ax=axes[3, 0], label='Female - Urban')
axes[2, 2].set_title('Hemoglobin Level by Gender and Residential Area')
axes[2, 2].legend()
axes[3, 0].legend()

# Plot urea level by gender and residential area
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Town')]['urea_lvl'], ax=axes[3, 1], label='Male - Town')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Town')]['urea_lvl'], ax=axes[3, 1], label='Female - Town')
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Urban')]['urea_lvl'], ax=axes[3, 2], label='Male - Urban')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Urban')]['urea_lvl'], ax=axes[3, 2], label='Female - Urban')
axes[3, 1].set_title('Urea Level by Gender and Residential Area')
axes[3, 1].legend()
axes[3, 2].legend()

# Plot triglyceride level by gender and residential area
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Town')]['triglyceride_lvl'], ax=axes[4, 0], label='Male - Town')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Town')]['triglyceride_lvl'], ax=axes[4, 0], label='Female - Town')
sns.histplot(data[(data['gender'] == 'Male') & (data['residential_area'] == 'Urban')]['triglyceride_lvl'], ax=axes[4, 1], label='Male - Urban')
sns.histplot(data[(data['gender'] == 'Female') & (data['residential_area'] == 'Urban')]['triglyceride_lvl'], ax=axes[4, 1], label='Female - Urban')
axes[4, 0].set_title('Triglyceride Level by Gender and Residential Area')
axes[4, 0].legend()
axes[4, 1].legend()

# Adjust spacing between subplots
plt.subplots_adjust(hspace=0.5)

plt.show()

# Load the data
data = pd.read_csv('/content/train.csv')
# Create a grid of plots
fig, axes = plt.subplots(6, 4, figsize=(16, 20))

# Plot age distribution by residential area
sns.histplot(data[data['residential_area'] == 'Town']['age'], ax=axes[0, 0], color='blue', label='Town')
sns.histplot(data[data['residential_area'] == 'Urban']['age'], ax=axes[0, 0], color='green', label='Urban')
axes[0, 0].set_title('Age Distribution by Residential Area')
axes[0, 0].legend()

# Plot height distribution by residential area
sns.histplot(data[data['residential_area'] == 'Town']['height_in_cm'], ax=axes[0, 1], color='blue', label='Town')
sns.histplot(data[data['residential_area'] == 'Urban']['height_in_cm'], ax=axes[0, 1], color='green', label='Urban')
axes[0, 1].set_title('Height Distribution by Residential Area')
axes[0, 1].legend()

# Plot weight distribution by residential area
sns.histplot(data[data['residential_area'] == 'Town']['weight_in_lbs'], ax=axes[0, 2], color='blue', label='Town')
sns.histplot(data[data['residential_area'] == 'Urban']['weight_in_lbs'], ax=axes[0, 2], color='green', label='Urban')
axes[0, 2].set_title('Weight Distribution by Residential Area')
axes[0, 2].legend()

# Plot left eyesight level by residential area
sns.countplot(data[data['residential_area'] == 'Town']['left_eyesight_lvl'], ax=axes[0, 3], color='blue', label='Town')
sns.countplot(data[data['residential_area'] == 'Urban']['left_eyesight_lvl'], ax=axes[1, 0], color='green', label='Urban')
axes[0, 3].set_title('Left Eyesight Level by Residential Area')
axes[0, 3].legend()
axes[1, 0].legend()

# Plot right eyesight level by residential area
sns.countplot(data[data['residential_area'] == 'Town']['right_eyesight_lvl'], ax=axes[1, 1], color='blue', label='Town')
sns.countplot(data[data['residential_area'] == 'Urban']['right_eyesight_lvl'], ax=axes[1, 2], color='green', label='Urban')
axes[1, 1].set_title('Right Eyesight Level by Residential Area')
axes[1, 1].legend()
axes[1, 2].legend()

# Plot left ear hearing by residential area
sns.countplot(data[data['residential_area'] == 'Town']['can_hear_left_ear'], ax=axes[1, 3], color='blue', label='Town')
sns.countplot(data[data['residential_area'] == 'Urban']['can_hear_left_ear'], ax=axes[2, 0], color='green', label='Urban')
axes[1, 3].set_title('Left Ear Hearing by Residential Area')
axes[1, 3].legend()
axes[2, 0].legend()

# Plot right ear hearing by residential area
sns.countplot(data[data['residential_area'] == 'Town']['can_hear_right_ear'], ax=axes[2, 1], color='blue', label='Town')
sns.countplot(data[data['residential_area'] == 'Urban']['can_hear_right_ear'], ax=axes[2, 2], color='green', label='Urban')
axes[2, 1].set_title('Right Ear Hearing by Residential Area')
axes[2, 1].legend()
axes[2, 2].legend()

# Plot blood pressure level 1 by residential area
sns.histplot(data[data['residential_area'] == 'Town']['blood_pressure_lvl1'], ax=axes[2, 3], color='blue', label='Town')
sns.histplot(data[data['residential_area'] == 'Urban']['blood_pressure_lvl1'], ax=axes[3, 0], color='green', label='Urban')
axes[2, 3].set_title('Blood Pressure Level 1 by Residential Area')
axes[2, 3].legend()
axes[3, 0].legend()

# Plot blood pressure level 2 by residential area
sns.histplot(data[data['residential_area'] == 'Town']['blood_pressure_lvl2'], ax=axes[3, 1], color='blue', label='Town')
sns.histplot(data[data['residential_area'] == 'Urban']['blood_pressure_lvl2'], ax=axes[3, 2], color='green', label='Urban')
axes[3, 1].set_title('Blood Pressure Level 2 by Residential Area')
axes[3, 1].legend()
axes[3, 2].legend()

# Plot glucose level by residential area
sns.histplot(data[data['residential_area'] == 'Town']['glucose_lvl'], ax=axes[3, 3], color='blue', label='Town')
sns.histplot(data[data['residential_area'] == 'Urban']['glucose_lvl'], ax=axes[4, 0], color='green', label='Urban')
axes[3, 3].set_title('Glucose Level by Residential Area')
axes[3, 3].legend()
axes[4, 0].legend()

# Plot triglyceride level by residential area
sns.histplot(data[data['residential_area'] == 'Town']['triglyceride_lvl'], ax=axes[4, 1], color='blue', label='Town')
sns.histplot(data[data['residential_area'] == 'Urban']['triglyceride_lvl'], ax=axes[4, 2], color='green', label='Urban')
axes[4, 1].set_title('Triglyceride Level by Residential Area')
axes[4, 1].legend()
axes[4, 2].legend()

# Plot smoking habit by residential area
sns.countplot(data[data['residential_area'] == 'Town']['smoking_habit'], ax=axes[4, 3], color='blue', label='Town')
sns.countplot(data[data['residential_area'] == 'Urban']['smoking_habit'], ax=axes[5, 0], color='green', label='Urban')
axes[4, 3].set_title('Smoking Habit by Residential Area')
axes[4, 3].legend()
axes[5, 0].legend()

# Plot drinking habit by residential area
sns.countplot(data[data['residential_area'] == 'Town']['drinking_habit'], ax=axes[5, 1], color='blue', label='Town')
sns.countplot(data[data['residential_area'] == 'Urban']['drinking_habit'], ax=axes[5, 2], color='green', label='Urban')
axes[5, 1].set_title('Drinking Habit by Residential Area')
axes[5, 1].legend()
axes[5, 2].legend()

# Adjust spacing between subplots
plt.subplots_adjust(hspace=0.5)

plt.show()

# Train Data Set
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
data = pd.read_csv('/content/train.csv')

# Create a grid of plots
fig, axes = plt.subplots(3, 2, figsize=(12, 12))

# Plot age distribution
sns.histplot(data['age'], ax=axes[0, 0])
axes[0, 0].set_title('Age Distribution')

# Plot height distribution
sns.histplot(data['height_in_cm'], ax=axes[0, 1])
axes[0, 1].set_title('Height Distribution')

# Plot weight distribution
sns.histplot(data['weight_in_lbs'], ax=axes[1, 0])
axes[1, 0].set_title('Weight Distribution')

# Plot smoking habit distribution
sns.countplot(data['smoking_habit'], ax=axes[1, 1])
axes[1, 1].set_title('Smoking Habit Distribution')

# Plot glucose level distribution
sns.histplot(data['glucose_lvl'], ax=axes[2, 0])
axes[2, 0].set_title('Glucose Level Distribution')

# Adjust spacing between subplots
plt.subplots_adjust(hspace=0.5)

plt.show()

# Encode categorical variables
encoder = OneHotEncoder(handle_unknown='ignore')
X_train = encoder.fit_transform(train_df[categorical_features])
X_test = encoder.transform(test_df[categorical_features])

scaler = StandardScaler(with_mean=False)

X_train = X_train.toarray()
X_test = X_test.toarray()

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Normalize the data using StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

X_train = X_train.toarray()
X_test = X_test.toarray()

# Perform dimensionality reduction using PCA
pca = PCA(n_components=10)
X_train = pca.fit_transform(X_train)
X_test = pca.transform(X_test)

# Perform dimensionality reduction using PCA
pca = PCA(n_components=10)  # Adjust the number of components as needed
X_train = pca.fit_transform(X_train)
X_test = pca.transform(X_test)

# Split the data into training and test sets
y_train = train_df['triglyceride_lvl']

# Train a random forest regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
test_predictions = model.predict(X_test)

# Create the submission file
submission = pd.DataFrame({'candidate_id': test_df['candidate_id'], 'triglyceride_lvl': test_predictions})
submission.to_csv('submission.csv', index=False)

from google.colab import files

# Save the submission DataFrame to a CSV file
submission.to_csv('submission.csv', index=False)

# Download the CSV file
files.download('submission.csv')

import numpy as np

def check_input(actual, predicted):
    # Check if actual and predicted are lists or numpy arrays
    if not isinstance(actual, (list, np.ndarray)) or not isinstance(predicted, (list, np.ndarray)):
        raise ValueError("actual and predicted must be lists or numpy arrays")

    # Check if actual and predicted have the same length
    if len(actual) != len(predicted):
        raise ValueError("actual and predicted must have the same length")

    # Check if actual and predicted contain numerical values
    try:
        actual = np.array(actual, dtype=float)
        predicted = np.array(predicted, dtype=float)
    except ValueError:
        raise ValueError("actual and predicted must contain numerical values")

    return actual, predicted

from sklearn.metrics import mean_squared_error

# Calculate the mean squared error
mse = mean_squared_error(actual, predicted)

# Print the mean squared error
print("Mean squared error:", mse)

# Calculate the root mean squared error
rmse = np.sqrt(mse)

# Print the root mean squared error
print("Root mean squared error:", rmse)

from sklearn.metrics import mean_absolute_error, median_absolute_error

# Calculate the mean absolute error
mae = mean_absolute_error(actual, predicted)

# Print the mean absolute error
print("Mean absolute error:", mae)

# Calculate the median absolute error
median_ae = median_absolute_error(actual, predicted)

# Print the median absolute error
print("Median absolute error:", median_ae)

from sklearn.metrics import mean_absolute_error

def calculate_score(actual, predicted):
    mae = mean_absolute_error(actual, predicted)
    score = max(0, 100 - mae)
    return score
actual = [10, 20, 30, 40, 50]
predicted = [15, 25, 35, 45, 55]

score = calculate_score(actual, predicted)
print(f"Score: {score:.2f}")

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

def evaluate_regression(actual, predicted):
    results = {}
    results['mean_absolute_error'] = mean_absolute_error(actual, predicted)
    results['mean_squared_error'] = mean_squared_error(actual, predicted)
    results['r2_score'] = r2_score(actual, predicted)
    return results

regression_results = evaluate_regression(actual, predicted)
print(regression_results)

from sklearn.model_selection import train_test_split
from sklearn.datasets import make_regression

# Generate synthetic regression data
X, y = make_regression(n_samples=100, n_features=4, noise=0.1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the RandomForestRegressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate regression metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

# Print the metrics
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (R²): {r2}")

import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_regression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Generate synthetic regression data
X, y = make_regression(n_samples=100, n_features=4, noise=0.1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the RandomForestRegressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate regression metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

# Print the metrics
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (R²): {r2}")

# Data visualization
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', edgecolor='k', alpha=0.7, label='Predicted vs Actual')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Ideal Fit')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.grid(True)
plt.show()